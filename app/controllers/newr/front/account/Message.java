package controllers.newr.front.account;import net.sf.json.JSONObject;import org.apache.commons.lang.StringUtils;import play.mvc.Before;import play.mvc.With;import utils.ErrorInfo;import utils.PageBean;import business.BidAnswers;import business.BidQuestions;import business.StationLetter;import business.Supervisor;import business.newr.Bid;import business.newr.User;import constants.Constants;import constants.Constants.DeleteType;import constants.Constants.SystemSupervisor;import controllers.interceptor.newr.FInterceptor;import controllers.newr.BaseController;@With(FInterceptor.class)public class Message extends BaseController {		@Before(only = {			"front.account.Message.systemMsgs",			"front.account.Message.inboxMsgs",			"front.account.Message.markMsgsReaded",			"front.account.Message.markMsgsUnread",			"front.account.Message.outboxMsgs",			"front.account.Message.sendMsgInit",			"front.account.Message.bidQuestions"	})	public static void messageCount() {		User user = User.currUser();				if(null == user) {			LoginAndRegisterAction.logining();		}				ErrorInfo error = new ErrorInfo();		int unreadSystemMsgCount = StationLetter.queryUserUnreadSystemMsgsCount(user.id, error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_FRONT);		}				int unreadInboxMsgCount = StationLetter.queryUserUnreadInboxMsgsCount(user.id, error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_FRONT);		}				int userBidQuestions = BidQuestions.queryQuestionCount(user.id, error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_FRONT);		}				renderArgs.put("unreadSystemMsgCount", unreadSystemMsgCount);		renderArgs.put("unreadInboxMsgCount", unreadInboxMsgCount);		renderArgs.put("userBidQuestions", userBidQuestions);	}			public static void countMessage(){		User user = User.currUser();				if(null == user) {			LoginAndRegisterAction.logining();		}				ErrorInfo error = new ErrorInfo();		int unreadSystemMsgCount = StationLetter.queryUserUnreadSystemMsgsCount(user.id, error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_FRONT);		}				int unreadInboxMsgCount = StationLetter.queryUserUnreadInboxMsgsCount(user.id, error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_FRONT);		}				int userBidQuestions = BidQuestions.queryQuestionCount(user.id, error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_FRONT);		}				JSONObject json = new JSONObject();				json.put("unreadSystemMsgCount", unreadSystemMsgCount);		json.put("unreadInboxMsgCount", unreadInboxMsgCount);		json.put("userBidQuestions", userBidQuestions);				renderJSON(json);	}	/**	 * 发送消息初始化	 */	public static void sendMsgInit() {		String adminName = Supervisor.querySystemSupervisorName();				render(adminName);	}		/**	 * 发送消息	 */	public static void sendMsg(String receiverName, String title, String content) {		User user = User.currUser();				ErrorInfo error = new ErrorInfo();						if (receiverName.equals(Supervisor.querySystemSupervisorName())) {			StationLetter msg = new StationLetter();			msg.senderUserId = user.id;			msg.receiverSupervisorId = SystemSupervisor.ID;			msg.title = title;			msg.content = content;			msg.sendToSupervisorByUser(error);						renderJSON(error);		}				StationLetter msg = new StationLetter();		msg.senderUserId = user.id;		msg.receiverUserName = receiverName;		msg.title = title;		msg.content = content;		msg.sendToUserByUser(error);				renderJSON(error);	}	/**	 * 删除系统消息	 * @param ids	 */	public static void deleteSystemMsgs(String ids) {		ErrorInfo error = new ErrorInfo();		long userId = User.currUser().id;				if (StringUtils.isBlank(ids)) {			error.code = -1;			error.msg = "请选择要删除的站内信";						renderJSON(error);		}		String arr[] = ids.split(",");		for (String str : arr) {			long id = Long.parseLong(str);			StationLetter.deleteInboxMsgByUser(userId, id, DeleteType.DELETE, error);						if (error.code < 0) {				break;			}		}				renderJSON(error);	}	/**	 * 删除收件箱消息	 * @param ids	 */	public static void deleteInboxMsgs(String ids) {		ErrorInfo error = new ErrorInfo();		long userId =  User.currUser().id;				if (StringUtils.isBlank(ids)) {			error.code = -1;			error.msg = "请选择要删除的站内信";						renderJSON(error);		}		String arr[] = ids.split(",");		for (String str : arr) {			long id = Long.parseLong(str);			StationLetter.deleteInboxMsgByUser(userId, id, DeleteType.DELETE, error);			if (error.code < 0) {				break;			}		}		renderJSON(error);	}	/**	 * 删除发件箱消息	 * @param ids	 */	public static void deleteOutboxMsgs(String ids) {		ErrorInfo error = new ErrorInfo();				if (StringUtils.isBlank(ids)) {			error.code = -1;			error.msg = "请选择要删除的站内信";						renderJSON(error);		}		String arr[] = ids.split(",");		for (String str : arr) {			long id = Long.parseLong(str);			StationLetter.deleteOutboxMsgByUser(User.currUser().id, id, DeleteType.DELETE, error);			if (error.code < 0) {				break;			}		}		renderJSON(error);	}	/**	 * 标记为已读	 * @param ids	 */	public static void markMsgsReaded(String ids) {		ErrorInfo error = new ErrorInfo();				long userId = User.currUser().id;				if (StringUtils.isBlank(ids)) {			error.code = -1;			error.msg = "请选择要标记为已读的站内信";						renderJSON(error);		}		String arr[] = ids.split(",");		for (String str : arr) {			long id = Long.parseLong(str);			StationLetter.markUserMsgReaded(userId, id, error);		}				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_FRONT);		}				int unreadSystemMsgCount = StationLetter.queryUserUnreadSystemMsgsCount(userId, error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_FRONT);		}				int unreadInboxMsgCount = StationLetter.queryUserUnreadInboxMsgsCount(userId, error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_FRONT);		}				JSONObject json = new JSONObject();		json.put("unreadSystemMsgCount", unreadSystemMsgCount);		json.put("unreadInboxMsgCount", unreadInboxMsgCount);		renderJSON(json);	}	/**	 * 标记为未读	 * @param ids	 */	public static void markMsgsUnread(String ids) {		ErrorInfo error = new ErrorInfo();				long userId = User.currUser().id;				if (StringUtils.isBlank(ids)) {			error.code = -1;			error.msg = "请选择要标记为未读的站内信";						renderJSON(error);		}				String arr[] = ids.split(",");		for (String str : arr) {			long id = Long.parseLong(str);			StationLetter.markUserMsgUnread(userId, id, error);		}		if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_FRONT);		}				int unreadSystemMsgCount = StationLetter.queryUserUnreadSystemMsgsCount(userId, error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_FRONT);		}				int unreadInboxMsgCount = StationLetter.queryUserUnreadInboxMsgsCount(userId, error);				if(error.code < 0) {			render(Constants.ERROR_PAGE_PATH_FRONT);		}				JSONObject json = new JSONObject();		json.put("unreadSystemMsgCount", unreadSystemMsgCount);		json.put("unreadInboxMsgCount", unreadInboxMsgCount);		renderJSON(json);	}				/**	 * 回复站内信	 * @param msgId	 */	public static void replyMsg(long msgId, String title, String content) {		ErrorInfo error = new ErrorInfo();		long userId = User.currUser().id;		StationLetter msg = new StationLetter();		msg.senderUserId = userId;		msg.title = title;		msg.content = content;		msg.replyToSomebodyByUser(msgId, error);				renderJSON(error);	}		public static void replyMsgInit(long msgId) {		StationLetter msg = new StationLetter(msgId);			render(msg);	}		/**	 * 针对当前用户的所有借款提问	 */	public static void bidQuestions(int currPage, int pageSize, String title, int isAnswer){		ErrorInfo error = new ErrorInfo();		PageBean<BidQuestions> pageBean = BidQuestions.queryQuestion(currPage == 0 ? 1 : currPage,				pageSize == 0 ? 10 : pageSize, 0, title, isAnswer, User.currUser().id, error);				if(null == pageBean) {			flash.error(error.msg);						render();		}				render(pageBean);	}		/**	 * 提问详情(异步)	 */	public static void bidQuestionDetail(long id){		ErrorInfo error = new ErrorInfo();		BidQuestions bidQuestion = BidQuestions.queryBidQuestionDetail(id, error);				if(null == bidQuestion) {			renderText(error.msg);						render();		}				Bid bid = new Bid();		bid.bidDetail = true;		bid.id = bidQuestion.bidId;				render(bidQuestion, bid);	} 		/**	 * 回复	 */	public static void createAnswers(long questionId, String content){		if(0 == questionId || StringUtils.isBlank(content) || content.length() > 200) 			renderText("数据有误!");					BidAnswers answer = new BidAnswers();		answer.content = content;		answer.questionId = questionId;				ErrorInfo error = new ErrorInfo();		answer.createAnswers(error);				renderText(error.msg);	}		/**	 * 删除提问	 */	public static void deleteBidQuestion(String ids){		ErrorInfo error = new ErrorInfo();				if(null == ids || ids.length() == 0) 			renderText("数据有误!");				String arr[] = ids.split(",");				for (String str : arr) {			BidQuestions.delete(Long.parseLong(str), error);			if (error.code < 0) 				break;		}		renderText(error.msg);	} }